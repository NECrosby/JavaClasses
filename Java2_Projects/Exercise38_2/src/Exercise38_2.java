/* ******************************************************************
 *  Naomi Crosby - Exercise 38.2 Due November 26
 *  
 *	(Scrollable result set) Write a program that uses the buttons 
 *	First, Next, Prior, Last, Insert, Delete, and Update, and 
 *	modify a single record in the Address table, as shown in 
 *	Figure 38.7.
 *
 *	Program 38.2 on page 38-32, however use a RowSet
 *	The Address table in the database will need a primary
 *	key to get this to work. In MySQL, execute a SQL
 *	command to set the primary key.
 *
 * ***************************************************************** */

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.sql.RowSet;
import javax.swing.*;

import com.sun.rowset.JdbcRowSetImpl;
import java.sql.*;

public class Exercise38_2 extends JApplet {
	private static final long serialVersionUID = 1L;

	// UI - variables declared 
	private JButton jbtFirst = new JButton("First");
	private JButton jbtNext = new JButton("Next");
	private JButton jbtPrior = new JButton("Prior");
	private JButton jbtLast = new JButton("Last");
	private JButton jbtInsert = new JButton("Insert");
	private JButton jbtDelete = new JButton("Delete");
	private JButton jbtUpdate = new JButton("Update");

	private JTextField jtfAddressIDValue = new JTextField(3);	// Primary Key
	private JTextField jtfFirstName = new JTextField(10);
	private JTextField jtfMI = new JTextField(2);
	private JTextField jtfLastName = new JTextField(15);
	private JTextField jtfStreet  = new JTextField(40);
	private JTextField jtfCity = new JTextField(15);
	private JTextField jtfState = new JTextField(2);
	private JTextField jtfZip = new JTextField(5);
	private JTextField jtfTelephone = new JTextField(10);
	private JTextField jtfEmail = new JTextField(30);		

	private JPanel jpButtons = new JPanel();
	private JPanel jpAddressID = new JPanel();
	private JPanel jpName = new JPanel();
	private JPanel jpStreet = new JPanel();
	private JPanel jpStateInfo = new JPanel();
	private JPanel jpPhone = new JPanel();
	private JPanel jpEmail = new JPanel();
	private JPanel jpAddress = new JPanel();
	private JPanel jpStatus = new JPanel();

	private JLabel jlblStatus = new JLabel("Database: javabook; Table: Address");
	private JLabel jlblAddressID = new JLabel("Address ID");

	private RowSet rowSet = new JdbcRowSetImpl();	// Row set
	private int currentRowNumber;		// Current row number
	
	// Used for get the next AddressID
	private static RowSet tempRowSet = new JdbcRowSetImpl();
	private static int primaryKeyValue = getLastUsedAddressID();

	public static void main(String[] args) {
		Exercise38_2 applet = new Exercise38_2();
		JFrame frame = new JFrame();
		frame.setTitle("Exercise 38.2 - Modified to use RowSet");
		frame.add(applet, BorderLayout.CENTER);
		applet.init();
		applet.start();
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
	/** CONSTRUCTOR */
	public Exercise38_2() {
		initComponents();
		initializeDB();		// Connect to database, create statement, get result set
	}

	/*******************************************************************************
	 * 	
	 *  				WARNING: Do NOT modify this code. 
	 *	This method is called from within the constructor to initialize the form.
	 *  The content of this method is always regenerated by the Form Editor.
	 *  
	 *******************************************************************************/

	private void initComponents() {

		// Add Buttons to Buttons Panel
		jpButtons.add(jbtFirst);
		jpButtons.add(jbtNext);
		jpButtons.add(jbtPrior);
		jpButtons.add(jbtLast);
		jpButtons.add(jbtInsert);
		jpButtons.add(jbtDelete);
		jpButtons.add(jbtUpdate);
		add(jpButtons, BorderLayout.NORTH);

		// AddressID Panel - Primary Key
		jpAddressID.setLayout(new FlowLayout(FlowLayout.LEFT));
		jpAddressID.add(jlblAddressID);
		jtfAddressIDValue.setEditable(false);
		jtfAddressIDValue.setOpaque(true);
		jtfAddressIDValue.setBackground(Color.WHITE);
		jtfAddressIDValue.setForeground(Color.RED);
		jtfAddressIDValue.setFont(new Font("sanserif", Font.BOLD, 14));
		jpAddressID.add(jtfAddressIDValue);

		// Name Panel - Row 1 in Address Panel
		jpName.setLayout(new FlowLayout(FlowLayout.LEFT));
		jpName.add(new JLabel("First Name"));
		jpName.add(jtfFirstName);
		jpName.add(new JLabel("MI"));
		jpName.add(jtfMI);
		jpName.add(new JLabel("Last Name"));
		jpName.add(jtfLastName);

		// Street Panel - Row 2 in Address Panel
		jpStreet.setLayout(new FlowLayout(FlowLayout.LEFT));
		jpStreet.add(new JLabel("Street"));
		jpStreet.add(jtfStreet);

		// City, State, Zip Panel - Row 3 in Address Panel
		jpStateInfo.setLayout(new FlowLayout(FlowLayout.LEFT));
		jpStateInfo.add(new JLabel("City"));
		jpStateInfo.add(jtfCity);
		jpStateInfo.add(new JLabel("State"));
		jpStateInfo.add(jtfState);
		jpStateInfo.add(new JLabel("ZIP"));
		jpStateInfo.add(jtfZip);

		// Phone Panel - Row 4 in Address Panel
		jpPhone.setLayout(new FlowLayout(FlowLayout.LEFT));
		jpPhone.add(new JLabel("Telephone"));
		jpPhone.add(jtfTelephone);

		// Email Panel - Row 5 in Address Panel
		jpEmail.setLayout(new FlowLayout(FlowLayout.LEFT));
		jpEmail.add(new JLabel("Email"));
		jpEmail.add(jtfEmail);

		// Address Panel - CENTER in Applet/Frame
		jpAddress.setLayout(new GridLayout(6, 0));
		jpAddress.add(jpAddressID);
		jpAddress.add(jpName);
		jpAddress.add(jpStreet);
		jpAddress.add(jpStateInfo);
		jpAddress.add(jpPhone);
		jpAddress.add(jpEmail);
		add(jpAddress, BorderLayout.CENTER);

		// Status Panel - SOUTH in Applet/Frame
		jpStatus.setLayout(new FlowLayout(FlowLayout.LEFT));
		jpStatus.add(jlblStatus);
		add(jpStatus, BorderLayout.SOUTH);

		// Add Action Listeners 
		jbtFirst.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				jbtFirstActionPerformed(e);
			}
		});
		jbtNext.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				jbtNextActionPerformed(e);
			}
		});
		jbtPrior.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				jbtPriorActionPerformed(e);
			}
		});		
		jbtLast.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				jbtLastActionPerformed(e);
			}
		});
		jbtInsert.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				jbtInsertActionPerformed(e);
			}
		});
		jbtDelete.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				jbtDeleteActionPerformed(e);
			}
		});
		jbtUpdate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				jbtUpdateActionPerformed(e);
			}
		});
	}
	private void initializeDB() {
		// Initialize the database connection, create statement, & result set
		try {
			Class.forName("com.mysql.jdbc.Driver");
			System.out.println("Driver loaded");
			rowSet.setUrl("jdbc:mysql://localhost/javabook");
			rowSet.setUsername("scott");
			rowSet.setPassword("tiger");
			System.out.println("Database connected");
			rowSet.setCommand("SELECT * FROM Address");
			rowSet.execute();
			rowSet.next();
			System.out.println("Database Initialized");
		} catch (SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		}
	}

	private void jbtFirstActionPerformed(ActionEvent e) {
		try {
			if ( rowSet.isFirst() ) {
				showRecord();
				jlblStatus.setText("This is the FIRST row");
				System.out.println("The current row number is " + currentRowNumber);
			} 
			else {
				rowSet.absolute(1);
				clearTextFields();
				showRecord();
				jlblStatus.setText("This is the FIRST row");
				System.out.println("The current row number is " + currentRowNumber);
			}
		} catch (Exception ex) {
			jlblStatus.setText(ex.toString());
		}
	}
	private void jbtNextActionPerformed(ActionEvent e) {
		try {
			if ( !rowSet.isLast() ) {
				rowSet.next();
				rowSet.moveToCurrentRow();
				clearTextFields();
				showRecord();
				System.out.println("The current row number is " + currentRowNumber);
			} else {
				clearTextFields();
				showRecord();
				jlblStatus.setText("This is the last row");
				System.out.println("The current row number is " + currentRowNumber);
			}
		} catch (Exception ex) {
			jlblStatus.setText(ex.toString());
		}
	}
	private void jbtPriorActionPerformed(ActionEvent e) {
		try {
			if ( rowSet.isFirst() ) {
				clearTextFields();
				showRecord();
				jlblStatus.setText("This is the first row");
				System.out.println("The current row number is " + currentRowNumber);
			} else {
				rowSet.previous();
				clearTextFields();
				showRecord();
				System.out.println("The current row number is " + currentRowNumber);
			}
		} catch (Exception ex) {
			jlblStatus.setText(ex.toString());
		}
	}
	private void jbtLastActionPerformed(ActionEvent e) {
		try {
			if ( !rowSet.isLast() ) {
				clearTextFields();
				rowSet.getRow();
				rowSet.last();
				showRecord();
				System.out.println("The current row number is " + currentRowNumber);
			} else {
				jlblStatus.setText("This is already the LAST row");
				System.out.println("The current row number is " + currentRowNumber);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			jlblStatus.setText(ex.toString());
		}
	}

	private void jbtInsertActionPerformed(ActionEvent e) {
		try {
			insert();
			jlblStatus.setText("Insertion succeeded");
			primaryKeyValue = getLastUsedAddressID();	// invoke to refresh the next addressID
		} catch (Exception ex) {
			jlblStatus.setText(ex.getMessage());
			ex.printStackTrace();
		}
	}
	private void jbtDeleteActionPerformed(ActionEvent e) {
		try {
			rowSet.deleteRow();
			jlblStatus.setText("Deletion succeeded");
			clearTextFields();
			rowSet.moveToCurrentRow();
		} catch (Exception ex) {
			ex.printStackTrace();
			jlblStatus.setText(ex.toString());
		}
	}
	private void jbtUpdateActionPerformed(ActionEvent e) {
		try {
			updateRecord();			// Update fields in the current row
			rowSet.updateRow();		// Invoke the update method in the result set
			jlblStatus.setText("Update succeeded");
		} catch (Exception ex) {
			ex.printStackTrace();
			jlblStatus.setText(ex.toString());
		}
	}

	// function called by the INSERT button
	protected void insert() {
		try {
			// Insert a new record into the database
			rowSet.moveToInsertRow();	
			setPrimaryKeyValue();
			updateRecord();				// Update the fields
			showRecord();
			rowSet.insertRow();			// Insert the row
			rowSet.moveToCurrentRow();	// Move the cursor back to the position before the insertion
		} catch (SQLException ex) {
			jlblStatus.setText("Problem inserting new record...");
			ex.printStackTrace();
		}
	}
	protected void setPrimaryKeyValue() {
		try {
			/* *** Need to find the last value of the AddressID at last insert, ***
			   *** increment it, and use that as the next AddressID  			***	*/
			rowSet.updateInt("addressID", primaryKeyValue);
		} catch (SQLException ex) {
			jlblStatus.setText("Problems setting AddressID, which is the Primary Key");
			ex.printStackTrace();
		}
	}
	/*	This did NOT work....
	 * protected int getRowCount(RowSet rowSet) {
		int primaryKeyValue = 0;

		try {
			int currentRow = rowSet.getRow();            			// Get current row  
			primaryKeyValue = rowSet.last() ? rowSet.getRow() : 0; 	// Determine number of rows  
			if (currentRow == 0) {									// If there was no current row
				rowSet.beforeFirst();											  
			} else {									  			// If there WAS a current row 
				rowSet.absolute(currentRow);             			// Restore it    
			}
		} catch (SQLException ex) {
			jlblStatus.setText("Problem getting row count...");
			ex.printStackTrace();
		}
		return primaryKeyValue + 1;
	}*/
	// Called by the INSERT Function -- OR -- UPDATE button
	protected void updateRecord() {
		try {
			// Update fields in the record
			// Gather data from the UI and update the database fields
			rowSet.updateString("firstname", jtfFirstName.getText().trim());
			rowSet.updateString("mi", jtfMI.getText().trim());
			rowSet.updateString("lastname", jtfLastName.getText().trim());
			rowSet.updateString("street", jtfStreet.getText().trim());
			rowSet.updateString("city", jtfCity.getText().trim());
			rowSet.updateString("state", jtfState.getText().trim());
			rowSet.updateString("zip", jtfZip.getText().trim());
			rowSet.updateString("telephone", jtfTelephone.getText().trim());
			rowSet.updateString("email", jtfEmail.getText().trim());
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
	}
	/*
	// Called by the INSERT Function
	protected void setPrimaryKeyValue() {
		try {
			// If primary key value exists already prompt user to enter a new value
			// Insert pick up on text field, SELECT * FROM Address WHERE AddressID = textfield value
			// then rowSet.next(); then if (rowSet.peek())
			// int primaryKeyValue = rowSet.getRow() + 1;
			int userAddressIDValue = Integer.parseInt( jtfAddressID.getText().trim() );
			try {
				Class.forName("com.mysql.jdbc.Driver");
				System.out.println("Driver loaded");
				tempRowSet.setUrl("jdbc:mysql://localhost/javabook");
				tempRowSet.setUsername("scott");
				tempRowSet.setPassword("tiger");
				tempRowSet.setCommand("SELECT * FROM Address WHERE AddressID = " + userAddressIDValue );		// " + jtfAddressID.getText().trim() + ";" 
				tempRowSet.execute();
				// tempRowSet.next() <-- if there is an AddressID in the table existing will return result
				// else will not position cursor after last row for insert
				System.out.println("The AddressID " + jtfAddressID.getText().trim() + " exists: " + tempRowSet.next());
				if ( !tempRowSet.next() ) {
					// IF tempRowSet does not return anything go here
					// this will set the rowSet.getRow() to the value in AddressID
					rowSet.updateString("addressID", jtfAddressID.getText().trim());  // email is the PRIMARY KEY is REQUIRED
					jlblStatus.setText("Current row number: " + rowSet.getRow());
				} else {					
					JOptionPane.showMessageDialog(null, "AddressID exists as a primary key already");
					rowSet.afterLast();
					jtfAddressID.setText( Integer.toString(rowSet.getRow()) );  //primaryKeyValue);
					rowSet.moveToInsertRow();
					rowSet.updateString("addressID", jtfAddressID.getText().trim());  // email is the PRIMARY KEY is REQUIRED
					System.out.println("The current row is " + rowSet.getRow());			
					jlblStatus.setText("Current row number: " + rowSet.getRow());
				}
			} catch (ClassNotFoundException e) {
				JOptionPane.showMessageDialog(null, "AddressID exists as a primary key already");
				e.printStackTrace();
			}
		} catch (SQLException ex) {
			jtfAddressID.setText(JOptionPane.showInputDialog("AddressID address MUST be present. It is primary key"));
			System.out.println("AddressID is the PRIMARY KEY & is REQUIRED.");
			ex.printStackTrace();
		}
	}
	 */
	private void showRecord() {
		try {
			jtfAddressIDValue.setText(rowSet.getString("addressID"));
			jtfFirstName.setText(rowSet.getString("firstname"));
			jtfMI.setText(rowSet.getString("mi"));
			jtfLastName.setText(rowSet.getString("lastname"));
			jtfStreet.setText(rowSet.getString("street"));
			jtfCity.setText(rowSet.getString("city"));
			jtfState.setText(rowSet.getString("state"));
			jtfZip.setText(rowSet.getString("zip"));
			jtfTelephone.setText(rowSet.getString("telephone"));
			jtfEmail.setText(rowSet.getString("email"));

			currentRowNumber = rowSet.getRow();
			jlblStatus.setText("Current row number: " + currentRowNumber);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	private void clearTextFields() {
		jtfAddressIDValue.setText("");
		jtfFirstName.setText("");
		jtfMI.setText("");
		jtfLastName.setText("");
		jtfStreet.setText("");
		jtfCity.setText("");
		jtfState.setText("");
		jtfZip.setText("");
		jtfTelephone.setText("");
		jtfEmail.setText("");
	}
	// Used for the STATIC AddressID Field
	private static int getLastUsedAddressID(){
		int value = -1;
		// Initialize the database connection, create statement, & result set
		try {
			tempRowSet.setUrl("jdbc:mysql://localhost/javabook");
			tempRowSet.setUsername("scott");
			tempRowSet.setPassword("tiger");
			tempRowSet.setCommand("SELECT MAX(AddressID) FROM Address");
			tempRowSet.execute();
			tempRowSet.next();
			value = tempRowSet.getInt(1) + 1;
			System.out.println("AddressID: " + value);
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return value;
	}
}
